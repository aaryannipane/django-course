CONFIGURE ID ATTRIBUTE 

    auto_id-The id attribute values are generated by prepending id_ to the form field names. This behavior
    is configurable, though, if you want to change the id convention or remove HTML id attributes and
    <label> tags entirely.

    Use the auto_id argument to the Form constructor to control the id and label behavior. This argument
    must be True, False or a string. By default, auto_id is set to the string 'id_%s'.

    Example:
        views.py
        fm = StudentRegistration(auto_id=False)
        fm = StudentRegistration(auto_id="geeky")

        - If auto_id is set to a string containing the format character "%s", then the form output will include
        <label> tags, and will generate id attributes based on the format string
        - If auto_id is set to True, then the form output will include <label> tags and will use the field name as its Id for each form field.
        - If auto_id is False, then the form output will not include <label> tags nor id attributes.
        - If auto_id is set to any other true value such as a string that doesn't include "%s"- then the 
        act as if auto_id is True.


CONFIGURE LABEL TAG:-
    label_suffix - A translatable string (defaults to a colon (:) in English) that will be appended after any label
    name when a form is rendered.
    It's possible to customize that character, or omit it entirely, using the label_suffix parameter.
    The label suffix is added only if the last character of the label isn't a punctuation character (in English,
    those are.,!,? or :)
    fm = StudentRegistration(label_suffix="")


DYNAMIC INITIAL VALUE
    initial initial is used to declare the initial value of form fields at runtime.
    To accomplish this, use the initial argument to a Form. This argument, if given, should be a dictionary
    mapping field names to initial values. Only include the fields for which you' re specifying an initial value;
    it's not necessary to include every field in your form.
    If a Field defines initial and you include initial when instantiating the Form, then the latter initial will
    have precedence.

    syntax :-
        fm = StudentRegistration(initial = {fieldname : initial_value})
    Example:- 
        fm = StudentRegistration(initial = {'name':'jhon'})