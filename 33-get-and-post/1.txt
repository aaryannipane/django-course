GET AND POST  METHODS

GET should be used only for requests that do not affect the state of the system.

Any request that could be used to change the state of the system should use POST.

GET would also be unsuitable for a password form, because the password would appear in the URL, and thus, also in browser history and server logs, all in plain text. Neither would it be suitable for large quantities of data, or for binary data, such as an image. A Web application that uses GET requests for admin forms IS a security risk: it can
be easy for an attacker to mimic a form s request to gain access to sensitive parts of the system.

POST, coupled with other protections like Django's CSRF protection offers more control over access.

GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values.

Django's login form is returned using the POST method, in which the browser butidles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.

GET is suitable for things like a web search form, because the URLs that represent a GET request can easily be
bookmarked, shared, or resubmitted.
